// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  account Account[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Store {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  name   String?
  userId String? @db.ObjectId

  billboards Billboard[]
  categories Category[]
  size       Size[]
  color      Color[]
  products   Product[]
  orders     Order[]

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Billboard {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  storeId String? @db.ObjectId
  Store   Store?  @relation(fields: [storeId], references: [id])

  categories Category[]

  label     String
  imageUrl  String
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Category {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  storeId String @db.ObjectId
  store   Store  @relation(fields: [storeId], references: [id])

  billboardId String    @db.ObjectId
  billboard   Billboard @relation(fields: [billboardId], references: [id])

  producs   Product[]
  name      String
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
}

model Size {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  storeId String @db.ObjectId
  store   Store  @relation(fields: [storeId], references: [id])

  name      String
  value     String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Color {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  storeId String @db.ObjectId
  store   Store  @relation(fields: [storeId], references: [id])

  name      String
  value     String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  storeId String @db.ObjectId
  store   Store  @relation(fields: [storeId], references: [id])

  categoryId String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id])

  name       String
  price      String
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)

  sizeId String @db.ObjectId
  size   Size   @relation(fields: [sizeId], references: [id])

  colorId String @db.ObjectId
  color   Color  @relation(fields: [colorId], references: [id])

  image      String[]
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  storeId    String      @db.ObjectId
  store      Store       @relation(fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
}
